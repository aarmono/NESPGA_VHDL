library IEEE, arriavi;
use IEEE.STD_LOGIC_1164.all;

package arriavi_components is

--clearbox auto-generated components begin
--Dont add any component declarations after this section

------------------------------------------------------------------
-- arriavi_tile_ctrl parameterized megafunction component declaration
-- Generated with 'mega_defn_creator' loader - do not edit
------------------------------------------------------------------
component arriavi_tile_ctrl
	generic (
		dll_ctl_static	:	std_logic_vector(8 downto 0) := "000000000";
		dll_ctlsel	:	string := "ctl_dynamic";
		dll_ctlsel_core	:	string := "ctl_core";
		dll_en	:	string := "dll_dis";
		dll_exponent_0	:	std_logic_vector(2 downto 0) := "000";
		dll_exponent_1	:	std_logic_vector(2 downto 0) := "000";
		dll_mantissa_0	:	std_logic_vector(4 downto 0) := "00000";
		dll_mantissa_1	:	std_logic_vector(4 downto 0) := "00000";
		dll_mode	:	string := "ddr_mode";
		dll_phase_offset_0	:	std_logic_vector(6 downto 0) := "0000000";
		dll_phase_offset_1	:	std_logic_vector(6 downto 0) := "0000000";
		hmc_add_lat	:	std_logic_vector(6 downto 0) := "0000000";
		hmc_addr_order	:	string := "chip_bank_row_col";
		hmc_auto_pd_cycles	:	std_logic_vector(17 downto 0) := "000000000000000000";
		hmc_ca_pos	:	string := "lane0to2";
		hmc_cas_wr_lat	:	std_logic_vector(5 downto 0) := "000101";
		hmc_cfg_pinpong_mode	:	string := "pingpong_off";
		hmc_clr_intr	:	string := "disable";
		hmc_crc_en	:	string := "disable";
		hmc_ctl_usr_refresh	:	string := "zero";
		hmc_ctrl2dbc_switch0	:	string := "local_tile_dbc0";
		hmc_ctrl2dbc_switch1	:	string := "local_tile_dbc1";
		hmc_ctrl_ac_pos	:	string := "use_0_1_2_lane";
		hmc_ctrl_burst_length	:	string := "bl_8_ctrl";
		hmc_ctrl_cmd_rate	:	string := "half_rate";
		hmc_ctrl_dimm_type	:	string := "component";
		hmc_ctrl_dualport_en	:	string := "disable";
		hmc_ctrl_enable_ecc	:	string := "disable";
		hmc_ctrl_in_protocol	:	string := "ast_in";
		hmc_ctrl_mem_type	:	string := "ddr3";
		hmc_ctrl_output_regd	:	string := "disable";
		hmc_ctrl_reorder_data	:	string := "disable";
		hmc_dbc0_burst_length	:	string := "bl_8_dbc0";
		hmc_dbc0_cmd_rate	:	string := "half_rate_dbc0";
		hmc_dbc0_ctrl_sel	:	string := "upper_mux_dbc0";
		hmc_dbc0_dualport_en	:	string := "disable";
		hmc_dbc0_enable_ecc	:	string := "disable";
		hmc_dbc0_in_protocol	:	string := "ast_dbc0";
		hmc_dbc0_output_regd	:	string := "disable";
		hmc_dbc0_pipe_lat	:	std_logic_vector(2 downto 0) := "000";
		hmc_dbc0_reorder_data	:	string := "disable";
		hmc_dbc1_burst_length	:	string := "bl_8_dbc1";
		hmc_dbc1_cmd_rate	:	string := "half_rate_dbc1";
		hmc_dbc1_ctrl_sel	:	string := "upper_mux_dbc1";
		hmc_dbc1_dualport_en	:	string := "disable";
		hmc_dbc1_enable_ecc	:	string := "disable";
		hmc_dbc1_in_protocol	:	string := "ast_dbc1";
		hmc_dbc1_output_regd	:	string := "disable";
		hmc_dbc1_pipe_lat	:	std_logic_vector(2 downto 0) := "000";
		hmc_dbc1_reorder_data	:	string := "disable";
		hmc_dbc2_burst_length	:	string := "bl_8_dbc2";
		hmc_dbc2_cmd_rate	:	string := "half_rate_dbc2";
		hmc_dbc2_ctrl_sel	:	string := "upper_mux_dbc2";
		hmc_dbc2_dualport_en	:	string := "disable";
		hmc_dbc2_enable_ecc	:	string := "disable";
		hmc_dbc2_in_protocol	:	string := "ast_dbc2";
		hmc_dbc2_output_regd	:	string := "disable";
		hmc_dbc2_pipe_lat	:	std_logic_vector(2 downto 0) := "000";
		hmc_dbc2_reorder_data	:	string := "disable";
		hmc_dbc2ctrl_sel	:	string := "dbc0_to_local";
		hmc_dbc3_burst_length	:	string := "bl_8_dbc3";
		hmc_dbc3_cmd_rate	:	string := "half_rate_dbc3";
		hmc_dbc3_ctrl_sel	:	string := "upper_mux_dbc3";
		hmc_dbc3_dualport_en	:	string := "disable";
		hmc_dbc3_enable_ecc	:	string := "disable";
		hmc_dbc3_in_protocol	:	string := "ast_dbc3";
		hmc_dbc3_output_regd	:	string := "disable";
		hmc_dbc3_pipe_lat	:	std_logic_vector(2 downto 0) := "000";
		hmc_dbc3_reorder_data	:	string := "disable";
		hmc_dbi_en	:	string := "disable";
		hmc_device_width	:	string := "device_x8";
		hmc_enable_auto_corr	:	string := "disable";
		hmc_enable_dm	:	string := "enable";
		hmc_enable_dqs_tracking	:	string := "enable";
		hmc_enable_ecc_code_overwrites	:	string := "disable";
		hmc_enable_intr	:	string := "disable";
		hmc_fgr_en	:	string := "disable";
		hmc_geardn_en	:	string := "disable";
		hmc_gen_dbe	:	string := "disable";
		hmc_gen_sbe	:	string := "disable";
		hmc_interface_width	:	string := "dwidth_8";
		hmc_local_if_cs_width	:	string := "cs_width_2";
		hmc_lpasr_en	:	string := "disable";
		hmc_mask_corr_dropped_intr	:	string := "disable";
		hmc_mask_dbe_intr	:	string := "disable";
		hmc_mask_sbe_intr	:	string := "disable";
		hmc_mem_clk_disable_entry_cycles	:	std_logic_vector(5 downto 0) := "001010";
		hmc_mem_if_bankaddr_width	:	string := "bank_width_3";
		hmc_mem_if_coladdr_width	:	string := "col_width_12";
		hmc_mem_if_rowaddr_width	:	string := "row_width_16";
		hmc_open_page_en	:	string := "disable";
		hmc_parity_en	:	string := "disable";
		hmc_pasr_en	:	string := "disable";
		hmc_pdn_exit_cycles	:	string := "slow_exit";
		hmc_power_saving_exit_cycles	:	std_logic_vector(5 downto 0) := "000101";
		hmc_read_odt_chip	:	std_logic_vector(15 downto 0) := "0000000000000000";
		hmc_reorder_cmd	:	string := "disable";
		hmc_reserve0	:	std_logic_vector(15 downto 0) := "0000000000000000";
		hmc_self_rfsh_exit_cycles	:	string := "self_rfsh_exit_cycles_512";
		hmc_starve_limit	:	std_logic_vector(5 downto 0) := "111111";
		hmc_tccd	:	std_logic_vector(5 downto 0) := "000100";
		hmc_tcl	:	std_logic_vector(6 downto 0) := "0000110";
		hmc_tfaw	:	std_logic_vector(7 downto 0) := "00010000";
		hmc_tile_id	:	std_logic_vector(4 downto 0) := "00000";
		hmc_tmrd	:	std_logic_vector(5 downto 0) := "000010";
		hmc_tras	:	std_logic_vector(5 downto 0) := "010000";
		hmc_trc	:	std_logic_vector(7 downto 0) := "00010110";
		hmc_trcd	:	std_logic_vector(5 downto 0) := "000110";
		hmc_trefi	:	std_logic_vector(14 downto 0) := "000110000110000";
		hmc_trfc	:	std_logic_vector(9 downto 0) := "0000100010";
		hmc_trp	:	std_logic_vector(5 downto 0) := "000110";
		hmc_trrd	:	std_logic_vector(5 downto 0) := "000100";
		hmc_trtp	:	std_logic_vector(5 downto 0) := "000100";
		hmc_tsaw	:	std_logic_vector(7 downto 0) := "00010000";
		hmc_twr	:	std_logic_vector(5 downto 0) := "000110";
		hmc_twtr	:	std_logic_vector(5 downto 0) := "000100";
		hmc_write_odt_chip	:	std_logic_vector(15 downto 0) := "0000000000000000";
		lpm_type	:	string := "arriavi_tile_ctrl";
		mode	:	string := "tile_ddr";
		physeq_avl_ena	:	string := "avl_disable";
		physeq_bc_id_ena	:	string := "bc_disable";
		physeq_hmc_id	:	std_logic_vector(8 downto 0) := "000000000";
		physeq_hmc_or_core	:	string := "core";
		physeq_phy_clk_sel	:	string := "phy_clk0";
		physeq_tile_id	:	std_logic_vector(8 downto 0) := "000000000";
		physeq_trk_mgr_mrnk_mode	:	string := "one_rank";
		physeq_trk_mgr_read_monitor_ena	:	string := "disable"	);
	port(
		afi_cmd_bus	:	out std_logic_vector(383 downto 0);
		afi_core2ctl	:	in std_logic_vector(16 downto 0) := (others => '0');
		afi_ctl2core	:	out std_logic_vector(25 downto 0);
		afi_lane0_to_ctl	:	in std_logic_vector(15 downto 0) := (others => '0');
		afi_lane1_to_ctl	:	in std_logic_vector(15 downto 0) := (others => '0');
		afi_lane2_to_ctl	:	in std_logic_vector(15 downto 0) := (others => '0');
		afi_lane3_to_ctl	:	in std_logic_vector(15 downto 0) := (others => '0');
		cal_avl_in	:	in std_logic_vector(54 downto 0) := (others => '0');
		cal_avl_in_from_lane0	:	in std_logic_vector(32 downto 0) := (others => '0');
		cal_avl_in_from_lane1	:	in std_logic_vector(32 downto 0) := (others => '0');
		cal_avl_in_from_lane2	:	in std_logic_vector(32 downto 0) := (others => '0');
		cal_avl_in_from_lane3	:	in std_logic_vector(32 downto 0) := (others => '0');
		cal_avl_out_to_lanes	:	out std_logic_vector(53 downto 0);
		cal_avl_rdata_in	:	in std_logic_vector(31 downto 0) := (others => '0');
		cal_avl_rdata_out	:	out std_logic_vector(31 downto 0);
		cfg_core2ctl	:	in std_logic_vector(42 downto 0) := (others => '0');
		cfg_ctl2core	:	out std_logic_vector(15 downto 0);
		cfg_dbc0	:	in std_logic_vector(11 downto 0) := (others => '0');
		cfg_dbc1	:	in std_logic_vector(11 downto 0) := (others => '0');
		cfg_dbc2	:	in std_logic_vector(11 downto 0) := (others => '0');
		cfg_dbc3	:	in std_logic_vector(11 downto 0) := (others => '0');
		core2ctl_avl0	:	in std_logic_vector(60 downto 0) := (others => '0');
		core2ctl_avl1	:	in std_logic_vector(60 downto 0) := (others => '0');
		core_clk_fb_in	:	in std_logic_vector(1 downto 0) := (others => '0');
		core_clk_out	:	out std_logic_vector(1 downto 0);
		core_dll	:	in std_logic_vector(11 downto 0) := (others => '0');
		ctl2core_avl0	:	out std_logic_vector(13 downto 0);
		ctl2core_avl1	:	out std_logic_vector(13 downto 0);
		ctl2core_soc_out	:	out std_logic_vector(13 downto 0);
		ctl2dbc0	:	out std_logic_vector(42 downto 0);
		ctl2dbc1	:	out std_logic_vector(42 downto 0);
		ctl2dbc_in_down	:	in std_logic_vector(42 downto 0) := (others => '0');
		ctl2dbc_in_up	:	in std_logic_vector(42 downto 0) := (others => '0');
		ctl_mem_clk_disable	:	out std_logic_vector(1 downto 0);
		dbc2ctl0	:	in std_logic_vector(20 downto 0) := (others => '0');
		dbc2ctl1	:	in std_logic_vector(20 downto 0) := (others => '0');
		dbc2ctl2	:	in std_logic_vector(20 downto 0) := (others => '0');
		dbc2ctl3	:	in std_logic_vector(20 downto 0) := (others => '0');
		dll_clk_in	:	in std_logic := '0';
		dqs_in0	:	in std_logic_vector(1 downto 0) := (others => '0');
		dqs_in1	:	in std_logic_vector(1 downto 0) := (others => '0');
		dqs_in2	:	in std_logic_vector(1 downto 0) := (others => '0');
		dqs_in3	:	in std_logic_vector(1 downto 0) := (others => '0');
		dqs_out0	:	out std_logic_vector(1 downto 0);
		dqs_out1	:	out std_logic_vector(1 downto 0);
		dqs_out2	:	out std_logic_vector(1 downto 0);
		dqs_out3	:	out std_logic_vector(1 downto 0);
		global_reset_n	:	in std_logic := '0';
		hmc_core_clk_in	:	in std_logic := '0';
		mmr_in	:	in std_logic_vector(50 downto 0) := (others => '0');
		mmr_out	:	out std_logic_vector(33 downto 0);
		mrnk_read_core	:	in std_logic_vector(3 downto 0) := (others => '0');
		phy_clk_out0	:	out std_logic_vector(9 downto 0);
		phy_clk_out1	:	out std_logic_vector(9 downto 0);
		phy_clk_out2	:	out std_logic_vector(9 downto 0);
		phy_clk_out3	:	out std_logic_vector(9 downto 0);
		ping_pong_alert_n_in	:	in std_logic := '0';
		ping_pong_alert_n_out	:	out std_logic;
		ping_pong_in	:	in std_logic_vector(43 downto 0) := (others => '0');
		ping_pong_out	:	out std_logic_vector(43 downto 0);
		pll_clk_in	:	in std_logic_vector(1 downto 0) := (others => '0');
		pll_locked_in	:	in std_logic := '0';
		pll_vco_in	:	in std_logic_vector(7 downto 0) := (others => '0');
		pvt_ref_gry	:	out std_logic_vector(8 downto 0);
		rdata_en_full_core	:	in std_logic_vector(3 downto 0) := (others => '0');
		seq2core_reset_n	:	out std_logic
	);
end component;

--clearbox auto-generated components end
end arriavi_components;
